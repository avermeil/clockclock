#include "arduino_secrets.h"
/*
  Sketch generated by the Arduino IoT Cloud Thing "my thing"
  https://create.arduino.cc/cloud/things/98cc709c-c310-45c8-8714-2b3c14b9ce8b

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudLight builtin_led;
  int hour_1;
  int hour_2;
  int minute_1;
  int minute_2;
  int position1;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
#include <Wire.h>
#include <arduino-timer.h>
#include "thingProperties.h"

auto timer = timer_create_default(); // create a timer with default settings

void setup()
{
  Wire.begin(); // join i2c bus (address optional for master)

  // Initialize serial and wait for port to open:
  Serial.begin(115200);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(4);
  ArduinoCloud.printDebugInfo();
  pinMode(13, OUTPUT);

  // timer.every(1000, toggle_led);
  Serial.println("done setup()");
}

void loop()
{
  ArduinoCloud.update();
  // Your code here
  timer.tick(); // tick the timer
}

bool toggle_led(void *)
{
  builtin_led = !builtin_led;
  return true; // keep timer active? true
}

/*
  Since BuiltinLed is READ_WRITE variable, onBuiltinLedChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onBuiltinLedChange()
{
  // Add your code here to act upon BuiltinLed change
  Serial.println("changed");
  Serial.println(builtin_led);
  if (builtin_led)
  {
    digitalWrite(13, HIGH);
    dance();
  }
  // else
  // {
  //   digitalWrite(13, LOW);
  //   reset();
  // }
}

void onCalibrateChange()
{
  // Add your code here to act upon BuiltinLed change

  Serial.println(builtin_led);
  if (calibrate)
  {
    setHandPos(2, 0, 4319, 1, true);
    setHandPos(2, 1, 4319, 1, true);
    setHandPos(2, 2, 4319, 1, true);
    setHandPos(2, 3, 4319, 1, true);
  }
}

void dance()
{
  goVertical();
  timer.in(4 * 1000, spin);
}

bool goVertical()
{
  setHandPos(2, 0, 0, 0, true);
  setHandPos(2, 1, 2160, 0, false);
  setHandPos(2, 2, 0, 0, true);
  setHandPos(2, 3, 2160, 0, false);
}

bool spin(void *)
{
  setHandPos(2, 0, 0, 3, true);
  setHandPos(2, 1, 0, 3, false);
  setHandPos(2, 2, 0, 3, true);
  setHandPos(2, 3, 0, 3, false);
}

bool reset()
{
  timer.cancel();
  setHandPos(2, 0, 0, 0, true);
  setHandPos(2, 1, 0, 0, true);
  setHandPos(2, 2, 0, 0, true);
  setHandPos(2, 3, 0, 0, true);
}

void setHallPos(byte board, byte hand, int hallPos)
{
  Serial.println("SENDING CALIBRATION DATA");
  Wire.beginTransmission(board);

  Wire.write(0); // command
  Wire.write(hand);

  Wire.write(lowByte(hallPos));
  Wire.write(highByte(hallPos));

  Wire.endTransmission();
}

void setHandPos(byte board, byte hand, int handPos, byte extraTurns, bool clockwise)
{
  Serial.println("sending new handPos");
  Wire.beginTransmission(board);

  Wire.write(1); // command
  Wire.write(hand);

  Wire.write(lowByte(handPos));
  Wire.write(highByte(handPos));

  Wire.write(extraTurns);
  Wire.write(clockwise);

  Wire.endTransmission();
}

void onMinute1Change()
{
  // setHandPos(2, 0, minute_1, 0, true);
}
void onMinute1HallChange()
{
  setHallPos(2, 0, minute_1_hall);
}

void onHour1Change()
{
  // setHandPos(2, 1, hour_1, 0, true);
}
void onHour1HallChange()
{
  setHallPos(2, 1, hour_1_hall);
}

void onMinute2Change()
{
  // setHandPos(2, 2, minute_2, 0, true);
}
void onMinute2HallChange()
{
  setHallPos(2, 2, minute_2_hall);
}

void onHour2Change()
{
  // setHandPos(2, 3, hour_2, 0, true);
}
void onHour2HallChange()
{
  setHallPos(2, 3, hour_2_hall);
}